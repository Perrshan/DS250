---
title: "Client Report - Project 4"
subtitle: "Course DS 250"
author: "Xave Perry"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---

```{python}
#| label: libraries
#| include: false
import pandas as pd
import numpy as np
import plotly.express as px
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import sqlite3
```


## Elevator pitch

_paste your elevator pitch here_
_A SHORT (4-5 SENTENCES) PARAGRAPH THAT `DESCRIBES KEY INSIGHTS` TAKEN FROM METRICS IN THE PROJECT RESULTS THINK TOP OR MOST IMPORTANT RESULTS._

```{python}
#| label: project data
#| code-summary: Read and format project data
# Include and execute your code here
df = pd.read_csv("https://raw.githubusercontent.com/byuidatascience/data4dwellings/master/data-raw/dwellings_ml/dwellings_ml.csv")

```

__Highlight the Questions and Tasks__

## QUESTION|TASK 1

__COPY PASTE QUESTION|TASK 1 FROM THE PROJECT HERE__

_type your results and analysis here_

```{python}
#| label: Q1
#| code-summary: Read and format data
# Include and execute your code here

with sqlite3.connect('your_database.db') as con:
    # Write DataFrame to SQLite
    df.to_sql('home_data', con, index=False, if_exists='replace')

    # Query and display results
    q_livearea = '''
    SELECT yrbuilt, AVG(livearea) AS AVG_livearea, before1980
    FROM home_data
    GROUP BY yrbuilt;
    '''

    q_quality = '''
    SELECT before1980, 'Quality A' AS quality_type, SUM(quality_A) AS count
    FROM home_data
    GROUP BY quality_type, before1980

    UNION ALL

    SELECT before1980, 'Quality B' AS quality_type, SUM(quality_B) AS count
    FROM home_data
    GROUP BY quality_type, before1980

    UNION ALL

    SELECT before1980, 'Quality C' AS quality_type, SUM(quality_C) AS count
    FROM home_data
    GROUP BY quality_type, before1980

    UNION ALL

    SELECT before1980, 'Quality D' AS quality_type, SUM(quality_D) AS count
    FROM home_data
    GROUP BY quality_type, before1980;
    '''

    q_condition = '''
    SELECT before1980, 'Excelent' AS condition, SUM(condition_Excel) AS count
    FROM home_data
    GROUP BY condition, before1980

    UNION ALL

    SELECT before1980, 'Very Good' AS condition, SUM(condition_VGood) AS count
    FROM home_data
    GROUP BY condition, before1980

    UNION ALL

    SELECT before1980, 'Good' AS condition, SUM(condition_Good) AS count
    FROM home_data
    GROUP BY condition, before1980

    UNION ALL

    SELECT before1980, 'Average' AS condition, SUM(condition_AVG) AS count
    FROM home_data
    GROUP BY condition, before1980;
    '''
    #condition_Fair was all equal to 0 so I excluded it

    q_garage = '''
    SELECT before1980, 'Attached' AS garage_type, SUM(gartype_Att) AS count
    FROM home_data
    GROUP BY garage_type, before1980

    UNION ALL

    SELECT before1980, 'Detatched' AS garage_type, SUM(gartype_Det) AS count
    FROM home_data
    GROUP BY garage_type, before1980

    UNION ALL

    SELECT before1980, 'Car Port' AS garage_type, SUM(gartype_CP) AS count
    FROM home_data
    GROUP BY garage_type, before1980

    UNION ALL

    SELECT before1980, 'None' AS garage_type, SUM(gartype_None) AS count
    FROM home_data
    GROUP BY garage_type, before1980;
    '''

    q_arc = '''

    SELECT before1980, 'CONVERSIONS' AS arc_style, SUM("arcstyle_CONVERSIONS") AS count
    FROM home_data
    GROUP BY arc_style, before1980

    UNION ALL

    SELECT before1980, 'ONE AND HALF-STORY' AS arc_style, SUM("arcstyle_ONE AND HALF-STORY") AS count
    FROM home_data
    GROUP BY arc_style, before1980

    UNION ALL

    SELECT before1980, 'ONE-STORY' AS arc_style, SUM("arcstyle_ONE-STORY") AS count
    FROM home_data
    GROUP BY arc_style, before1980

    UNION ALL

    SELECT before1980, 'SPLIT LEVEL' AS arc_style, SUM("arcstyle_SPLIT LEVEL") AS count
    FROM home_data
    GROUP BY arc_style, before1980

    UNION ALL

    SELECT before1980, 'TRI-LEVEL' AS arc_style, SUM("arcstyle_TRI-LEVEL") AS count
    FROM home_data
    GROUP BY arc_style, before1980

    UNION ALL

    SELECT before1980, 'TRI-LEVEL WITH BASEMENT' AS arc_style, SUM("arcstyle_TRI-LEVEL WITH BASEMENT") AS count
    FROM home_data
    GROUP BY arc_style, before1980

    UNION ALL

    SELECT before1980, 'TWO-STORY' AS arc_style, SUM("arcstyle_TWO-STORY") AS count
    FROM home_data
    GROUP BY arc_style, before1980;
    '''

    q_status = '''
    SELECT before1980, 'Status I' AS status, SUM(status_I) AS count
    FROM home_data
    GROUP BY status, before1980

    UNION ALL

    SELECT before1980, 'Status V' AS status, SUM(status_V) AS count
    FROM home_data
    GROUP BY status, before1980;
    '''

    q_money = '''
    SELECT before1980, 'Selling Price' AS category, AVG(sprice) AS average
    FROM home_data
    GROUP BY category, before1980

    UNION ALL

    SELECT before1980, 'Net Price' AS category, AVG(netprice) AS average
    FROM home_data
    GROUP BY category, before1980

    UNION ALL

    SELECT before1980, 'Total Assessed Price' AS category, AVG(tasp) AS average
    FROM home_data
    GROUP BY category, before1980;
    '''
    

    result_livearea = pd.read_sql_query(q_livearea, con)
    result_quality = pd.read_sql_query(q_quality, con)
    result_condition = pd.read_sql_query(q_condition, con)
    result_garage = pd.read_sql_query(q_garage, con)
    result_arc = pd.read_sql_query(q_arc, con)
    result_status = pd.read_sql_query(q_status, con)
    result_money = pd.read_sql_query(q_money, con)

    print(result_money)

```

_include figures in chunks and discuss your findings in the figure._

```{python}
#| label: Q1 chart
#| code-summary: plot example
#| fig-cap: "My useless chart"
#| fig-align: center
# Include and execute your code here

chart = px.box(
    result_livearea,
    x="before1980",
    y="AVG_livearea",
    labels={'AVG_livearea': 'Average Live Area', 'before1980': 'Before 1980'},
)

chart.update_xaxes(tickvals=[0, 1], ticktext=['After 1980', 'Before 1980'])

# Show the chart
chart.show()

#qualities look like they could be good
#AVG_livearea
#Tasp no good
#Count qualities
```

```{python}
#| label: Q1 chart
#| code-summary: plot example
#| fig-cap: "My useless chart"
#| fig-align: center
# Include and execute your code here
chart = px.bar(
    result_quality,
    x="quality_type",
    y="count",
    color="before1980",
    barmode="group",  # This ensures bars are grouped by "before1980"
    labels={'count': 'Count', 'quality_type': 'Quality', 'before1980': 'Before 1980'}
)

# Show the chart
chart.show()

#qualities look like they could be good
#AVG_livearea

#qualities look like they could be good
#livearea
```

```{python}
#| label: Q1 chart
#| code-summary: plot example
#| fig-cap: "My useless chart"
#| fig-align: center
# Include and execute your code here
chart = px.bar(
    result_condition,
    x="condition",
    y="count",
    color="before1980",
    barmode="group",  # This ensures bars are grouped by "before1980"
    labels={'count': 'Count', 'condition': 'Condition', 'before1980': 'Before 1980'}
)

# Show the chart
chart.show()

#qualities look like they could be good
#AVG_livearea

#qualities look like they could be good
#livearea
```

```{python}
#| label: Q1 chart
#| code-summary: plot example
#| fig-cap: "My useless chart"
#| fig-align: center
# Include and execute your code here
chart = px.bar(
    result_garage,
    x="garage_type",
    y="count",
    color="before1980",
    barmode="group",  # This ensures bars are grouped by "before1980"
    labels={'count': 'Count', 'garage_type': 'Garage Type', 'before1980': 'Before 1980'}
)

# Show the chart
chart.show()

#qualities look like they could be good
#AVG_livearea

#qualities look like they could be good
#livearea
```

```{python}
#| label: Q1 chart
#| code-summary: plot example
#| fig-cap: "My useless chart"
#| fig-align: center
# Include and execute your code here
chart = px.bar(
    result_arc,
    x="arc_style",
    y="count",
    color="before1980",
    barmode="group",  # This ensures bars are grouped by "before1980"
    labels={'count': 'Count', 'arc_style': 'Arc Style', 'before1980': 'Before 1980'}
)

# Show the chart
chart.show()

#qualities look like they could be good
#AVG_livearea

#qualities look like they could be good
#livearea
```

```{python}
#| label: Q1 chart
#| code-summary: plot example
#| fig-cap: "My useless chart"
#| fig-align: center
# Include and execute your code here
chart = px.bar(
    result_status,
    x="status",
    y="count",
    color="before1980",
    barmode="group",  # This ensures bars are grouped by "before1980"
    labels={'count': 'Count', 'status': 'Status Type', 'before1980': 'Before 1980'}
)

# Show the chart
chart.show()

#qualities look like they could be good
#AVG_livearea

#qualities look like they could be good
#livearea
```

```{python}
#| label: Q1 chart
#| code-summary: plot example
#| fig-cap: "My useless chart"
#| fig-align: center
# Include and execute your code here
chart = px.bar(
    result_money,
    x="category",
    y="average",
    color="before1980",
    barmode="group",  # This ensures bars are grouped by "before1980"
    labels={'average': 'Average', 'category': 'Price Type', 'before1980': 'Before 1980'}
)

# Show the chart
chart.show()

#qualities look like they could be good
#AVG_livearea

#qualities look like they could be good
#livearea
```

```{python}
#| label: Q1 table
#| code-summary: table example
#| tbl-cap: "Not much of a table"
#| tbl-cap-location: top
# Include and execute your code here

```


## QUESTION|TASK 2

__COPY PASTE QUESTION|TASK 2 FROM THE PROJECT HERE__

_type your results and analysis here_

```{python}
#| label: Q2
#| code-summary: Read and format data
# Include and execute your code here
# Read data
X = df[[
    'livearea', 'quality_C', 'condition_Good', 'gartype_Det', 'gartype_None', 'arcstyle_CONVERSIONS', 'arcstyle_ONE AND HALF-STORY', 'arcstyle_ONE-STORY', 'status_V'
]]

y = df['before1980']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)

print("X_train shape:", X_train.shape)
print("X_test shape:", X_test.shape)
print("y_train shape:", y_train.shape)
print("y_test shape:", y_test.shape)

```

_include figures in chunks and discuss your findings in the figure._

```{python}
#| label: Q2 chart
#| code-summary: plot example
#| fig-cap: "My useless chart"
#| fig-align: center
# Include and execute your code here

# Initialize the Logistic Regression model
model = LogisticRegression()

# Train the model using the training data
model.fit(X_train, y_train)

# Make predictions on the test data
y_pred = model.predict(X_test)

# Evaluate the model performance
accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
classification_rep = classification_report(y_test, y_pred)

# Print the evaluation metrics
print("Accuracy:", AVG_accuracy)
print("Confusion Matrix:\n", conf_matrix)
print("Classification Report:\n", classification_rep)
```


```{python}
#| label: Q2 table
#| code-summary: table example
#| tbl-cap: "Not much of a table"
#| tbl-cap-location: top
# Include and execute your code here
mydat = df.head(1000)\
    .groupby('year')\
    .sum()\
    .reset_index()\
    .tail(10)\
    .filter(["year", "AK","AR"])

display(mydat)

```


## QUESTION|TASK 3

__COPY PASTE QUESTION|TASK 3 FROM THE PROJECT HERE__

_type your results and analysis here_

```{python}
#| label: Q3
#| code-summary: Read and format data
# Include and execute your code here


```

_include figures in chunks and discuss your findings in the figure._

```{python}
#| label: Q3 chart
#| code-summary: plot example
#| fig-cap: "My useless chart"
#| fig-align: center
# Include and execute your code here
chart = px.bar(df.head(200),
    x="name", 
    y="AK"
)
chart.show()
```


```{python}
#| label: Q3 table
#| code-summary: table example
#| tbl-cap: "Not much of a table"
#| tbl-cap-location: top
# Include and execute your code here
mydat = df.head(1000)\
    .groupby('year')\
    .sum()\
    .reset_index()\
    .tail(10)\
    .filter(["year", "AK","AR"])

display(mydat)

#AI CWAP

X = df[['Avg. Session Length', 'Time on App', 'Time on Website', 'Length of Membership']]
y = df['Yearly Amount Spent']

df = pd.read_csv('Ecommerce Customers')

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)

```

```{sql}
INSERT INTO member (first_name, last_name, start_date, status, email, phone_number) VALUES
('Oliver', 'Taylor', '1997-12-07', 'ACTIVE', 'Oliver.Taylor@fakemail.com', '250-541-5449');

INSERT INTO product (product_name, description, price, weight) VALUES
('Melapower', 'This product is Buoyant... ', '10.00', '3.5'),
('Melasoft', 'This product is Exemplary... ', '10.00', '3.5'),
('Melaboost', 'This product is Delightful... ', '7.00', '3.5'),
('Melabrite', 'This product is Glorious... ', '7.00', '3.5'),
('Lemon Brite', 'This product is Exhilarating... ', '6.00', '3.5'),
('Nut and Fruit Clusters', 'This product is Stellar... ', '6.50', '3.5'),
('Simply Fit Bars', 'This product is Exuberant... ', '12.00', '3.5'),
('Peak Performance', 'This product is Fantastic... ', '90.00', '3.5'),
('Gold Bar', 'This product is Awe-inspiring... ', '2.00', '3.5'),
('Renew Lotion', 'This product is Lively... ', '20.00', '3.5');

INSERT INTO cart (member_id) VALUES
(1);

INSERT INTO cart_product (cart_id, member_id, product_id) VALUES
(1,1,1)
(1,1,2)
(1,1,3)
(1,1,4)
(1,1,5)

INSERT INTO shipping_address (address_1, city, state, zip_code, country, member_id) VALUES
('828 Cypress Street', 'Moss Landing', 'PA', '90123', 'USA', 1);

INSERT INTO melaleuca_mock_store.order (tracking_number, expected_delivery_date, cart_id, member_id, shipping_address_id) VALUES
('IN7765260235771583', '2024-03-19', 1, 1, 1);

SELECT order_id, m.first_name, m.last_name, 
SUM(p.price) + 10.22 + (SUM(p.price)*0.06) AS ttl_price, SUM(p.weight) AS ttl_weight, o.expected_delivery_date
from melaleuca_mock_store.order o JOIN cart c ON
c.cart_id = o.cart_id JOIN cart_product cp ON
cp.cart_id = c.cart_id JOIN product p ON
p.product_id = cp.product_id JOIN `member` m ON
m.member_id = o.member_id
GROUP BY order_id, m.first_name, m.last_name, o.expected_delivery_date;
```
